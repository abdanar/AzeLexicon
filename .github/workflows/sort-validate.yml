name: üõ† Automated Term Standardization

# Trigger workflow on push or pull request for subject JSON files
on:
  push:
    paths:
      - "data/subjects/**"
  pull_request:
    paths:
      - "data/subjects/**"

jobs:
  validate-sort-generate:
    name: Validate, Sort & Generate Glossary
    runs-on: ubuntu-latest

    steps:

      # 1Ô∏è‚É£ Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      # 2Ô∏è‚É£ Setup Python
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # 3Ô∏è‚É£ Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then
            pip install -r requirements.txt
          fi

      # 4Ô∏è‚É£ Run validation & sort per subject (parallel & logs)
      - name: Run validation & sorting
        run: |
          set -euo pipefail
          echo "‚û°Ô∏è Running validate & sort scripts for all subjects..."
          mkdir -p logs
          fail_file=$(mktemp)
          touch "$fail_file"

          run_subject() {
            local subject="$1"
            local subject_name
            subject_name=$(basename "$subject")
            local script="$subject/scripts/sort_validate.py"
            local log_file="logs/${subject_name}_sort_validate.log"

            if [ -f "$script" ]; then
              echo "::group::‚û°Ô∏è Processing $subject_name"
              if python -u "$script" "$subject" > "$log_file" 2>&1; then
                cat "$log_file"
                echo "‚úîÔ∏è $subject_name processed successfully."
              else
                cat "$log_file"
                echo "‚ùå Validation failed for $subject_name"
                echo "$subject_name" >> "$fail_file"
              fi
              echo "::endgroup::"
            else
              echo "‚ö†Ô∏è No sort_validate.py found for $subject_name, skipping..."
            fi
          }
          export -f run_subject
          export fail_file

          find data/subjects/ -mindepth 1 -maxdepth 1 -type d | xargs -P4 -I{} bash -c 'run_subject "$@"' _ {}

          if [ -s "$fail_file" ]; then
            echo "‚ùå Some subjects failed validation:"
            cat "$fail_file"
            exit 1
          else
            echo "‚úîÔ∏è All subjects validated and sorted successfully!"
          fi

      # 5Ô∏è‚É£ Generate Markdown glossary (parallel)
      - name: Generate Markdown Glossary
        run: |
          set -euo pipefail
          mkdir -p glossary

          generate_md() {
            local subject="$1"
            local subject_name
            subject_name=$(basename "$subject")
            
            # Check if terms.json exists and is not empty
            local terms_file="$subject/terms.json"
            if [ ! -s "$terms_file" ]; then
              echo "‚ö†Ô∏è $terms_file is empty or missing, skipping..."
              return
            fi

            echo "::group::‚û°Ô∏è Generating Markdown for $subject_name"
            python -u data/scripts/generate_markdown.py "$subject"
            echo "‚úîÔ∏è Markdown generated for $subject_name"
            echo "::endgroup::"
          }

          export -f generate_md
          find data/subjects/ -mindepth 1 -maxdepth 1 -type d | xargs -P4 -I{} bash -c 'generate_md "$@"' _ {}